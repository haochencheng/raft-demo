syntax = "proto3";

option java_outer_classname = "RaftProto";
option java_package = "pers.raft.proto";

message VoteRequest {
    string candidateId = 1; // 请求选票的候选人的 Id
    int64 term = 2; // 候选人的任期号
    int64 lastLogTerm = 3; // 候选人的最后日志条目的任期号
    int64 lastLogIndex = 4; // 候选人最后日志条目的索引值
};

message VoteResponse {
    int64 term = 1; // 当前任期号，以便于候选人去更新自己的任期号
    bool voteGranted = 2; // 候选人赢得了此张选票时为真
};

enum EntryType {
    ENTRY_TYPE_DATA = 0;
    ENTRY_TYPE_CONFIGURATION= 1;
};

message LogEntry {
     uint64 term = 1;
     uint64 index = 2;
     EntryType type = 3;
     bytes data = 4;
}

message AppendEntriesRequest {
     int64 term = 1; //领导人任期号
     string leaderId =2; //领导人的 Id，以便于跟随者重定向请求
     int64 prevLogIndex=3; //新的日志条目紧随之前的索引值
     int64 prevLogTerm = 4; //prevLogIndex 条目的任期号
     int64 leaderCommit = 5; //领导人已经提交的日志的索引值
     repeated LogEntry entries = 6; // 准备存储的日志条目（表示心跳时为空；一次性发送多个是为了提高效率）
}

message AppendEntriesResponse {
    bool success = 1; // 跟随者包含了匹配上 prevLogIndex 和 prevLogTerm 的日志时为真
    uint64 term = 2; // 当前的任期号，用于领导人去更新自己
};

service RaftService {

    /**
     * 选举
     */
    rpc requestVote(VoteRequest) returns(VoteResponse);

    /**
     * 附加日志
     */
    rpc appendEntries(AppendEntriesRequest) returns(AppendEntriesResponse);


    rpc installSnapshot(VoteRequest) returns(VoteResponse);


}